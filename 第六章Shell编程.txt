第六章Shell编程
●一、创建Shell脚本
●当想要查看某条命令是否是内嵌命令时，可以使用 type 命令来查看
●type   cd 
●type   ps
●创建脚本
●vim  文件名
●#!/bin/sh    它指明了脚本中命令的解释器，否则在直接运行脚本时，将不能识别内嵌命令。
●运行方式
●1、使用解释器执行：指定运行程序   /bin/sh   脚本名
●2、作为可执行程序：直接运行，需要使用相对路径或绝对路径     (如果没有权限运行：添加运行权限    chmod +x  脚本名)
●3、使用source 指令：source    脚本名
●二、Shell 基础语法
●1、变量
●变量名的命名须遵循如下规则
● 命名只能使用英文字母、数字和下划线，首个字符不能以数字开头
●中间不能有空格，可以使用下划线（_）
● 不能使用标点符号
●不能使用 sh 里的关键字（可用 help 命令查看保留关键字）
●注意：变量名和等号之间不能有空格
●除了显式地直接赋值，还可以用语句给变量赋值，如

●使用一个定义过的变量，只要在变量名前面加美元符号即可。(只有在使用变量时才加$符，重新赋值不需要)

●大括号为变量边界符。不加大括号不知道变量名到哪里结束

●可以使用分号结束一行语句

●2、变量分类和数组
●运行 Shell 时同时存在的 3 种变量：局部变量、环境变量、Shell 变量
●变量本身是弱类型的，可以给同一个变量赋值数字和字符串等类型的数据
●在 Shell中也可以给变量赋值一个数组，如：arr =(1 2 3 4)
●获取数组长度
●${#array_name[@]}
●${#array_name[*]}

●读取数组中的内容
●${数组名 [下标 ]}
●设置数组中的内容
●数组名[下标]=内容
●删除数组中的某个元素
●unset 数组名[下标]
●删除整个数组
●unset 数组名
●分片访问
●${数组名 [@或 *]:开始下标 :结束下标 }
●3、Shell 传递参数
●在执行 Shell 脚本时，可以向脚本传递参数，脚本内获取参数的格式为 $n。
●n 代表一个数字，1 为执行脚本的第1 个参数，2 为第 2 个参数，以此类推。
●向脚本传递 3 个参数，并分别输出，其中 $0 为执行的文件名

●执行：./test.sh   a  b  c

●4、基本运算符(shell 中的运算都是整型运算，如计算浮点数用scale)
●Shell 和其他编程语言一样，支持算数运算符、关系运算符、布尔运算符、字符串运算符和文件测试运算符等多种运算符
●原生 sh 不支持简单的数学运算，但是可以通过其他命令来实现，如 awk 和 expr，其中 expr 最常用
●使用 expr 能完成表达式的求值操作

●注意 : 表达式和运算符之间要有空格，例如2+2 是不对的，必须写成 2 + 2，这与我们熟悉的大多数编程语言不一样。完整的表达式要被“ ”包含，注意这个字符在Esc 键下边，它不是常用的单引号。
●算数运算符

●注意：条件表达式要放在方括号之间，并且要有空格，例如[a==b] 是错误的，必须写成[ a == b ]。
●乘法运算，*前面必须加  \
●关系运算符( a=10 b=20 )


●逻辑运算符



●字符串运算符


●(())是一种数学计算命令，它除了可以进行最基本的加减乘除运算，还可以进行大于、小于、等于等关系运算，以及与、或、非逻辑运算

●三、Shell 流程控制语法
●1、if else 条件判断

●2、for循环

●序列

●字符串（被循环的字符串不能加引号，否则按照一个单词处理）

●while 循环

●until 循环执行一系列命令条件为false继续，直至条件为 true 时停止。

●case  var in 

●case 工作方式如上所示，取值后面必须为单词 in，每一模式必须以右括号结束。取值可以为变量或常数，匹配发现取值符合某一模式后，其间所有命令开始执行直至 ;;。
●取值将检测匹配的每一个模式。一旦模式匹配，则执行完匹配模式相应命令后不再继续其他模式。如果无一匹配模式，使用星号 * 捕获该值，再执行后面的命令。
●跳出循环
●在循环过程中，有时候需要在未达到循环结束条件时强制跳出循环，Shell 使用两个命令来实现该功能，即 break和 continue
●break命令允许跳出所有循环（终止执行后面的所有循环）
●continue 命令与 break 命令类似，只有一点区别，continue 命令不会跳出所有循环，仅仅跳出当前循环

●练习：根据行数输出金字塔


●四、定义函数
●可以带“function”定义fun()，也可以直接定义fun(), 不带任何参数。
●参数返回，可以显示添加return 返回，如果不加，将以最后一条命令运行结果作为返回值。return后跟数值n(0-255)。shell函数的返回值，仅支持return返回整数
●函数返回值在调用该函数后通过 $? 来获得。
●注意：所有函数在使用前必须定义。这意味着必须将函数放在脚本开始部分，直至shell解释器首次发现它时，才可以使用。调用函数仅使用其函数名即可。


●函数的参数
●在Shell中，调用函数时可以向其传递参数。在函数体内部，通过 $n 的形式来获取参数的值，例如，$1表示第一个参数，$2表示第二个参数...
●带参数的函数示例

●注意，10 不能获取第十个参数，获取第十个参数需要{10}。当n>=10时，需要使用${n}来获取参数。
●处理参数的一些特殊字符

●最后练习，将金字塔封装成函数
